-- Identify projects that are at risk for going overbudget. A project is 
considered to be overbudget if the cost of all employees assigned to the 
project is greater than the budget of the project. You'll need to prorate 
the cost of the employees to the duration of the project. For example, if 
the budget for a project that takes half a year to complete is $10K, then 
the total half-year salary of all employees assigned to the project should 
not exceed $10K. Salary is defined on a yearly basis, so be careful how to 
calculate salaries for the projects that last less or more than one year.
Output a list of projects that are overbudget with their project name, project 
budget, and prorated total employee expense (rounded to the next dollar amount).

HINT: to make it simpler, consider that all years have 365 days. You don't need to think about the leap years.

##############################################################################
1. SQL Solution
select 
    title,
    budget,
    ceiling(sum(salary)/365*(end_date::date - start_date::date)) total_emp_cost
from linkedin_projects p 
join linkedin_emp_projects ep on p.id=ep.project_id
join linkedin_employees e on e.id=ep.emp_id
group by title,project_id, end_date,start_date,budget
having round(sum(salary)/365*(end_date::date - start_date::date),0) > budget
order by title ASC

##############################################################################
2. R Solution
# Import your libraries
library(dplyr)

# Start writing code
linkedin_projects %>%
    inner_join(linkedin_emp_projects, by=c("id"="project_id")) %>%
    inner_join(linkedin_employees,by=c("emp_id"="id")) %>%
    mutate(days = end_date-start_date) %>%
    group_by(id,title) %>%
    summarize(budget,
    total_emp_salary_cost = ceiling(sum(salary/365*days))
                ) %>%
    filter(budget<total_emp_salary_cost) %>%
    distinct(title, .keep_all=T) %>%
    ungroup()%>%
    select(-id) 
